data.dir <- '~/data/'
train.file <- paste(data.dir, 'training.csv')
train.file
train.file <- paste0(data.dir, 'training.csv')
train.file
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
setwd("C:/GitProject/TIL/Kaggle/Facial Keypoints Detection")
# 데이터 경로
data.dir <- '~/data/'
train.file <- paste0(data.dir, 'training.csv')
test.file <- paste0(data.dir, 'test.csv')
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
# 데이터 경로
data.dir <- './data/'
train.file <- paste0(data.dir, 'training.csv')
test.file <- paste0(data.dir, 'test.csv')
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
str(d.train)
head(d.train)
head(str(d.train))
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
head(str(d.train))
str(d.train)
# 데이터 보기
im.train <- d.train$Image  # Image 열 데이터를 im.train에 저장
d.train$Image <- NULL  # d.train의 Image 열 삭제
head(d.train)
plot(cars)
plot(cars)
# 데이터 경로
data.dir <- './data/'
train.file <- paste0(data.dir, 'training.csv')
test.file <- paste0(data.dir, 'test.csv')
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
# 데이터프레임 보기
str(d.train)  # 데이터 레코드 수: 7049개, 변수 수: 31개
Sys.setlocale('LC_ALL','C')
train.file <- paste0(data.dir, 'training.csv')
```{r}
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
# 데이터프레임 보기
str(d.train)  # 데이터 레코드 수: 7049개, 변수 수: 31개
Sys.setlocale('LC_ALL','C')
# 데이터 경로
data.dir <- './data/'
train.file <- paste0(data.dir, 'training.csv')
test.file <- paste0(data.dir, 'test.csv')
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
# 데이터프레임 보기
str(d.train)  # 데이터 레코드 수: 7049개, 변수 수: 31개
# 데이터 경로
data.dir <- './data/'
train.file <- paste0(data.dir, 'training.csv')
test.file <- paste0(data.dir, 'test.csv')
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
Sys.setlocale('LC_ALL','C')
# 데이터프레임 보기
str(d.train)  # 데이터 레코드 수: 7049개, 변수 수: 31개
# 데이터 보기
im.train <- d.train$Image  # Image 변수 데이터를 im.train에 저장
d.train$Image <- NULL  # d.train의 Image 열 삭제
head(d.train)  # 5행의 데이터 레코드 확인
# 첫번째 이미지 데이터 보기
im.train[1]
# 데이터 보기
im.train <- d.train$Image  # Image 변수 데이터를 im.train에 저장
d.train$Image <- NULL  # d.train의 Image 열 삭제
head(d.train)  # 5행의 데이터 레코드 확인
# 첫번째 이미지 데이터 보기
im.train[1]
# 데이터 보기
im.train <- d.train$Image  # Image 변수 데이터를 im.train에 저장
d.train$Image <- NULL  # d.train의 Image 열 삭제
head(d.train)  # 5행의 데이터 레코드 확인
# 데이터 경로
data.dir <- './data/'
train.file <- paste0(data.dir, 'training.csv')
test.file <- paste0(data.dir, 'test.csv')
# 데이터 읽기 (read.csv)
d.train <- read.csv(train.file, stringsAsFactors = F)
# 데이터 보기
im.train <- d.train$Image  # Image 변수 데이터를 im.train에 저장
d.train$Image <- NULL  # d.train의 Image 열 삭제
head(d.train)  # 5행의 데이터 레코드 확인
# 첫번째 이미지 데이터 보기
im.train[1]
# 첫번째 이미지 데이터 보기
im.train[1][0:20]
# 첫번째 이미지 데이터 보기
im.train[1]
as.integer(unlist(strsplit(im.train[1], " ")))
# strsplit: 문자열 나누기
# unlist: 문자열을 벡터에 담기
# as.integer: 정수형 벡터로 변환
# strsplit: 문자열 나누기
# unlist: 문자열을 벡터에 담기
# as.integer: 정수형 벡터로 변환
# 첫번째 이미지 데이터 보기
im.train[1]
as.integer(unlist(strsplit(im.train[1], " ")))
# strsplit: 문자열 나누기
# unlist: 문자열을 벡터에 담기
# as.integer: 정수형 벡터로 변환
# 위 작업을 반복하기 전에 멀티코어방식을 지원하도록
# doMC 라이브러리 이용
install.packages('doMC', repos = "http://R-Forge.R-project.org")
library(doMC)
registerDoMC()
# 병렬처리작업 준비
im.train <- foreach(im = im.train, .combine = rbind) %dopar% {
as.integer(unlist(strsplit(im, " ")))
}
im.train <- foreach(im = im.train, .combine = rbind) %dopar% {
as.integer(unlist(strsplit(im, " ")))
}
as.integer(unlist(strsplit(im, " ")))
im.train <- foreach(im = im.train, .combine = rbind) %dopar% {
as.integer(unlist(strsplit(im, " ")))
}
str(im.train)
```{r setup, echo=FALSE, eval=FALSE}
Sys.setlocale('LC_ALL','C')
str(im.train)
Sys.setlocale('LC_ALL','C')
d.test <- read.csv(test.file, stringsAsFactors = F)
im.test <- foreach(im = d.test$Image, .combine = rbind) %dopar% {
as.Integer(unlist(strsplit(im, " ")))
}
library(doMC)
registerDoMC()
d.test <- read.csv(test.file, stringsAsFactors = F)
im.test <- foreach(im = d.test$Image, .combine = rbind) %dopar% {
as.Integer(unlist(strsplit(im, " ")))
}
im.test <- foreach(im = d.test$Image, .combine = rbind) %dopar% {
as.Integer(unlist(strsplit(im, " ")))
}
as.integer(unlist(strsplit(im, " ")))
d.test <- read.csv(test.file, stringsAsFactors = F)
im.test <- foreach(im = d.test$Image, .combine = rbind) %dopar% {
as.integer(unlist(strsplit(im, " ")))
}
d.test$Image <- NULL
save(d.train, im.train, d.test, im.test, file = 'data.Rd')
install.packages("rmarkdown")
str(d.test)
library("rmarkdown", lib.loc="~/R/win-library/3.5")
library("doMC", lib.loc="~/R/win-library/3.5")
